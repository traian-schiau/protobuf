// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: casttypewith.proto

package casttypewith

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_test_casttypewith_types "github.com/gogo/protobuf/test/casttypewith/types"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Castaway struct {
	MyCastedWith         *github_com_gogo_protobuf_test_casttypewith_types.Castee `protobuf:"bytes,1,opt,name=MyCastedWith,casttypewith=github.com/gogo/protobuf/test/casttypewith/types.Castee;github.com/gogo/protobuf/test/casttypewith/types.Caster" json:"MyCastedWith,omitempty"`
	MyBigInt             *math_big.Int                                            `protobuf:"bytes,2,opt,name=MyBigInt,casttypewith=math/big.Int;github.com/gogo/protobuf/test/casttypewith/types.BigIntCaster" json:"MyBigInt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                 `json:"-"`
	XXX_unrecognized     []byte                                                   `json:"-"`
	XXX_sizecache        int32                                                    `json:"-"`
}

func (m *Castaway) Reset()         { *m = Castaway{} }
func (m *Castaway) String() string { return proto.CompactTextString(m) }
func (*Castaway) ProtoMessage()    {}
func (*Castaway) Descriptor() ([]byte, []int) {
	return fileDescriptor_89df0e8921d154c4, []int{0}
}
func (m *Castaway) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Castaway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Castaway.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Castaway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Castaway.Merge(m, src)
}
func (m *Castaway) XXX_Size() int {
	return m.Size()
}
func (m *Castaway) XXX_DiscardUnknown() {
	xxx_messageInfo_Castaway.DiscardUnknown(m)
}

var xxx_messageInfo_Castaway proto.InternalMessageInfo

func (m *Castaway) GetMyCastedWith() *github_com_gogo_protobuf_test_casttypewith_types.Castee {
	if m != nil {
		return m.MyCastedWith
	}
	return nil
}

func (m *Castaway) GetMyBigInt() *math_big.Int {
	if m != nil {
		return m.MyBigInt
	}
	return nil
}

type Wilson struct {
	F1                   []byte   `protobuf:"bytes,1,opt,name=f1" json:"f1,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Wilson) Reset()         { *m = Wilson{} }
func (m *Wilson) String() string { return proto.CompactTextString(m) }
func (*Wilson) ProtoMessage()    {}
func (*Wilson) Descriptor() ([]byte, []int) {
	return fileDescriptor_89df0e8921d154c4, []int{1}
}
func (m *Wilson) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Wilson) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Wilson.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Wilson) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wilson.Merge(m, src)
}
func (m *Wilson) XXX_Size() int {
	return m.Size()
}
func (m *Wilson) XXX_DiscardUnknown() {
	xxx_messageInfo_Wilson.DiscardUnknown(m)
}

var xxx_messageInfo_Wilson proto.InternalMessageInfo

func (m *Wilson) GetF1() []byte {
	if m != nil {
		return m.F1
	}
	return nil
}

func init() {
	proto.RegisterType((*Castaway)(nil), "casttypewith.Castaway")
	proto.RegisterType((*Wilson)(nil), "casttypewith.Wilson")
}

func init() { proto.RegisterFile("casttypewith.proto", fileDescriptor_89df0e8921d154c4) }

var fileDescriptor_89df0e8921d154c4 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0x4e, 0x2c, 0x2e,
	0x29, 0xa9, 0x2c, 0x48, 0x2d, 0xcf, 0x2c, 0xc9, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x41, 0x16, 0x93, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f,
	0xcf, 0x4f, 0xcf, 0xd7, 0x07, 0x2b, 0x4a, 0x2a, 0x4d, 0x03, 0xf3, 0xc0, 0x1c, 0x30, 0x0b, 0xa2,
	0x59, 0x69, 0x02, 0x13, 0x17, 0x87, 0x73, 0x62, 0x71, 0x49, 0x62, 0x79, 0x62, 0xa5, 0xd0, 0x74,
	0x46, 0x2e, 0x1e, 0xdf, 0x4a, 0x10, 0x37, 0x35, 0x25, 0x3c, 0xb3, 0x24, 0x43, 0x82, 0x51, 0x81,
	0x51, 0x83, 0xc7, 0xa9, 0x78, 0xd5, 0x7d, 0xf9, 0x7c, 0x9c, 0xc6, 0x96, 0xa4, 0x16, 0x97, 0xe8,
	0x23, 0x3b, 0x41, 0x1f, 0xc4, 0x28, 0xd6, 0x03, 0x1b, 0x93, 0x6a, 0x4d, 0x9e, 0xbe, 0xa2, 0x20,
	0x14, 0x87, 0x08, 0x65, 0x71, 0x71, 0xf8, 0x56, 0x3a, 0x65, 0xa6, 0x7b, 0xe6, 0x95, 0x48, 0x30,
	0x81, 0x1d, 0xe5, 0xb7, 0xea, 0xbe, 0xbc, 0x57, 0x6e, 0x62, 0x49, 0x86, 0x7e, 0x52, 0x66, 0xba,
	0x9e, 0x67, 0x5e, 0x09, 0xe9, 0x36, 0x41, 0xcc, 0x83, 0xda, 0x07, 0x37, 0x5f, 0x49, 0x82, 0x8b,
	0x2d, 0x3c, 0x33, 0xa7, 0x38, 0x3f, 0x4f, 0x88, 0x8f, 0x8b, 0x29, 0xcd, 0x10, 0x12, 0x08, 0x41,
	0x4c, 0x69, 0x86, 0x4e, 0x2a, 0x27, 0x1e, 0xca, 0x31, 0x3e, 0x78, 0x28, 0xc7, 0xf8, 0xe3, 0xa1,
	0x1c, 0xe3, 0x8a, 0x47, 0x72, 0x8c, 0x3b, 0x1e, 0xc9, 0x31, 0x1e, 0x78, 0x24, 0xc7, 0x78, 0xe2,
	0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x02, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x02, 0xf1, 0xdb, 0xe6, 0xa4, 0x01, 0x00, 0x00,
}

func (m *Castaway) MarshalJSONPB(*github_com_gogo_protobuf_jsonpb.Marshaler) ([]byte, error) {
	return nil, fmt.Errorf("MarshalJSONPB is not supported by Castaway(casttypewith)")
}

func (m *Castaway) UnmarshalJSONPB(*github_com_gogo_protobuf_jsonpb.Unmarshaler, []byte) error {
	return fmt.Errorf("UnmarshalJSONPB is not supported by Castaway(casttypewith)")
}

func (m *Castaway) MarshalText() ([]byte, error) {
	return nil, fmt.Errorf("MarshalText is not supported by Castaway(casttypewith)")
}

func (m *Castaway) UnmarshalText([]byte) error {
	return fmt.Errorf("UnmarshalText is not supported by Castaway(casttypewith)")
}

func (this *Castaway) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Castaway)
	if !ok {
		that2, ok := that.(Castaway)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Castaway")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Castaway but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Castaway but is not nil && this == nil")
	}
	{
		__caster := &github_com_gogo_protobuf_test_casttypewith_types.Caster{}
		if !__caster.Equal(this.MyCastedWith, that1.MyCastedWith) {
			return fmt.Errorf("MyCastedWith this(%v) Not Equal that(%v)", this.MyCastedWith, that1.MyCastedWith)
		}
	}
	{
		__caster := &github_com_gogo_protobuf_test_casttypewith_types.BigIntCaster{}
		if !__caster.Equal(this.MyBigInt, that1.MyBigInt) {
			return fmt.Errorf("MyBigInt this(%v) Not Equal that(%v)", this.MyBigInt, that1.MyBigInt)
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Castaway) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Castaway)
	if !ok {
		that2, ok := that.(Castaway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &github_com_gogo_protobuf_test_casttypewith_types.Caster{}
		if !__caster.Equal(this.MyCastedWith, that1.MyCastedWith) {
			return false
		}
	}
	{
		__caster := &github_com_gogo_protobuf_test_casttypewith_types.BigIntCaster{}
		if !__caster.Equal(this.MyBigInt, that1.MyBigInt) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Wilson) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Wilson)
	if !ok {
		that2, ok := that.(Wilson)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Wilson")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Wilson but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Wilson but is not nil && this == nil")
	}
	if !bytes.Equal(this.F1, that1.F1) {
		return fmt.Errorf("F1 this(%v) Not Equal that(%v)", this.F1, that1.F1)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Wilson) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Wilson)
	if !ok {
		that2, ok := that.(Wilson)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.F1, that1.F1) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (m *Castaway) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Castaway) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Castaway) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MyBigInt != nil {
		{
			__caster := &github_com_gogo_protobuf_test_casttypewith_types.BigIntCaster{}
			size := __caster.Size(m.MyBigInt)
			i -= size
			if _, err := __caster.MarshalTo(m.MyBigInt, dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintCasttypewith(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MyCastedWith != nil {
		{
			__caster := &github_com_gogo_protobuf_test_casttypewith_types.Caster{}
			size := __caster.Size(m.MyCastedWith)
			i -= size
			if _, err := __caster.MarshalTo(m.MyCastedWith, dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintCasttypewith(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Wilson) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Wilson) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Wilson) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.F1 != nil {
		i -= len(m.F1)
		copy(dAtA[i:], m.F1)
		i = encodeVarintCasttypewith(dAtA, i, uint64(len(m.F1)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCasttypewith(dAtA []byte, offset int, v uint64) int {
	offset -= sovCasttypewith(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedCastaway(r randyCasttypewith, easy bool) *Castaway {
	this := &Castaway{}
	if r.Intn(5) != 0 {
		{
			__caster := &github_com_gogo_protobuf_test_casttypewith_types.Caster{}
			this.MyCastedWith = __caster.NewPopulated()
		}
	}
	if r.Intn(5) != 0 {
		{
			__caster := &github_com_gogo_protobuf_test_casttypewith_types.BigIntCaster{}
			this.MyBigInt = __caster.NewPopulated()
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCasttypewith(r, 3)
	}
	return this
}

func NewPopulatedWilson(r randyCasttypewith, easy bool) *Wilson {
	this := &Wilson{}
	if r.Intn(5) != 0 {
		v1 := r.Intn(100)
		this.F1 = make([]byte, v1)
		for i := 0; i < v1; i++ {
			this.F1[i] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCasttypewith(r, 2)
	}
	return this
}

type randyCasttypewith interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneCasttypewith(r randyCasttypewith) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringCasttypewith(r randyCasttypewith) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneCasttypewith(r)
	}
	return string(tmps)
}
func randUnrecognizedCasttypewith(r randyCasttypewith, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldCasttypewith(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldCasttypewith(dAtA []byte, r randyCasttypewith, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateCasttypewith(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateCasttypewith(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateCasttypewith(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateCasttypewith(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateCasttypewith(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateCasttypewith(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateCasttypewith(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Castaway) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MyCastedWith != nil {
		{
			__caster := &github_com_gogo_protobuf_test_casttypewith_types.Caster{}
			l = __caster.Size(m.MyCastedWith)
			n += 1 + l + sovCasttypewith(uint64(l))
		}
	}
	if m.MyBigInt != nil {
		{
			__caster := &github_com_gogo_protobuf_test_casttypewith_types.BigIntCaster{}
			l = __caster.Size(m.MyBigInt)
			n += 1 + l + sovCasttypewith(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Wilson) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F1 != nil {
		l = len(m.F1)
		n += 1 + l + sovCasttypewith(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCasttypewith(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCasttypewith(x uint64) (n int) {
	return sovCasttypewith(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Castaway) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCasttypewith
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Castaway: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Castaway: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyCastedWith", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasttypewith
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCasttypewith
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCasttypewith
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_gogo_protobuf_test_casttypewith_types.Caster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.MyCastedWith = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyBigInt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasttypewith
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCasttypewith
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCasttypewith
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_gogo_protobuf_test_casttypewith_types.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.MyBigInt = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCasttypewith(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCasttypewith
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCasttypewith
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Wilson) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCasttypewith
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wilson: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wilson: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasttypewith
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCasttypewith
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCasttypewith
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F1 = append(m.F1[:0], dAtA[iNdEx:postIndex]...)
			if m.F1 == nil {
				m.F1 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCasttypewith(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCasttypewith
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCasttypewith
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCasttypewith(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCasttypewith
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCasttypewith
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCasttypewith
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCasttypewith
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCasttypewith
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCasttypewith
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCasttypewith        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCasttypewith          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCasttypewith = fmt.Errorf("proto: unexpected end of group")
)
